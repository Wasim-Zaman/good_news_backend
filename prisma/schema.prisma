generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String     @id @default(uuid())
  name         String?
  image        String?
  mobileNumber String     @unique
  fcmToken     String?
  timeZone     String?
  language     String
  state        String
  district     String
  constituency String
  mandal       String
  postViews    PostView[]
  reporters    Reporter[]
  posts        Post[]
  advertisements Advertisement[]

  @@map("user")
}

model Post {
  id          String     @id @default(uuid())
  type        String
  image       String?
  description String
  status      Status
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  views       PostView[]
  userId      String
  user        User       @relation(fields: [userId], references: [id])
}

model Advertisement {
  id                 String   @id @default(uuid())
  advertisementType  String
  bannerType         String?
  image              String?
  content            String?
  postType           String
  status             Status @default(PENDING)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model Reporter {
  id           String   @id @default(uuid())
  name         String
  image        String?
  state        String
  district     String
  constituency String?
  mandal       String?
  status       Status   @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@map("reporters")
}

enum Status {
  PUBLISHED
  REJECTED
  PENDING
}

model PostView {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  viewedAt  DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Category {
  id           String  @id @default(uuid())
  image        String?
  mainCategory String?
  name         String
}

model Blog {
  id              String    @id @default(uuid())
  image           String?
  title           String
  visibility      String?
  views           Int       @default(0)
  publishDateTime DateTime?
  lastModified    DateTime  @updatedAt
  status          Int       @default(1)
  type            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Ad {
  id        String   @id @default(uuid())
  media     String
  title     String
  timestamp String?
  frequency Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ads")
}

model News {
  id        String   @id @default(uuid())
  image     String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LiveNews {
  id        String   @id @default(uuid())
  media     String
  name      String
  uri       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rss {
  id        String   @id @default(uuid())
  category  String
  language  String
  name      String
  url       String
  image     String?
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EPaper {
  id        String   @id @default(uuid())
  media     String
  name      String
  pdf       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchLog {
  id         String    @id @default(uuid())
  searchLog  String
  count      Int
  searchDate DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CMS {
  id          String   @id @default(uuid())
  media       String?
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
